---

telegraf_influxdata_base_url: https://repos.influxdata.com

telegraf_enable_snmp: false
# If yes, service will be started. Will not be started if set to no.
telegraf_start_service: true
telegraf_start_delay: 6

# If yes, will overwrite the packaged configuration with an Asnible/jinja2 template
telegraf_template_configuration: true

# Path for finding Telegraf data. Added for backwards-compatibility.
telegraf_binary_path: /usr/bin/telegraf
telegraf_configuration_dir: /etc/telegraf
telegraf_config_file: telegraf.conf

# Channel of Telegraf to install
telegraf_install_version: stable

# The user and group telegraf should run under (should be set to telegraf unless needed otherwise)
telegraf_runas_user: root
telegraf_runas_group: root

# Configuration Variables
telegraf_tags:
telegraf_aws_tags: false
telegraf_aws_tags_prefix:
# Configuration Template
telegraf_configuration_template: telegraf.conf.j2

telegraf_agent_configs:
  interval: 15s
  round_interval: "true"
  metric_batch_size: 10000
  metric_buffer_limit: 50000
  collection_jitter: 2s
  flush_interval: 10s
  flush_jitter: 5s
  debug: "false"
  quiet: "true"
  omit_hostname: "false"
  hostname: "{{ ansible_hostname }}"

#### Telegraf InfluxDB v2 Output
influxdb2_server_ip: 0.0.0.0
infisical_telegraf_influxdb2_default_url: "{{ lookup('infisical.vault.read_secrets', universal_auth_client_id=infisical_universal_auth_client_id, universal_auth_client_secret=infisical_universal_auth_client_secret, project_id=infisical_project_id, path='/COMMON', env_slug=infisical_env, secret_name='INFLUXDB2_URL', url=infisical_url) }}"
infisical_telegraf_influxdb2_token: "{{ lookup('infisical.vault.read_secrets', universal_auth_client_id=infisical_universal_auth_client_id, universal_auth_client_secret=infisical_universal_auth_client_secret, project_id=infisical_project_id, path='/COMMON', env_slug=infisical_env, secret_name='INFLUXDB2_TOKEN', url=infisical_url) }}"
infisical_telegraf_influxdb2_org: "{{ lookup('infisical.vault.read_secrets', universal_auth_client_id=infisical_universal_auth_client_id, universal_auth_client_secret=infisical_universal_auth_client_secret, project_id=infisical_project_id, path='/COMMON', env_slug=infisical_env, secret_name='INFLUXDB2_ORG', url=infisical_url) }}"
infisical_telegraf_influxdb2_bucket: "{{ lookup('infisical.vault.read_secrets', universal_auth_client_id=infisical_universal_auth_client_id, universal_auth_client_secret=infisical_universal_auth_client_secret, project_id=infisical_project_id, path='/COMMON', env_slug=infisical_env, secret_name='INFLUXDB2_BUCKET', url=infisical_url) }}"
telegraf_influxdb2_default_url: "{{ infisical_telegraf_influxdb2_default_url.value }}"
telegraf_influxdb2_token: "{{ infisical_telegraf_influxdb2_token.value }}"
telegraf_influxdb2_organization: "{{ infisical_telegraf_influxdb2_org.value }}"
telegraf_influxdb2_bucket: "{{ infisical_telegraf_influxdb2_bucket.value }}"
telegraf_influxdb2_timeout: 30s
telegraf_influxdb2_bucket_tag: ""
telegraf_influxdb2_exclude_bucket_tag: "false"
telegraf_influxdb2_http_headers: ""
telegraf_influxdb2_http_proxy: ""
telegraf_influxdb2_user_agent: telegraf
telegraf_influxdb2_content_encoding: gzip
telegraf_influxdb2_influx_uint_support: "false"
telegraf_influxdb2_tls_cert: "{{ ssl_certpath | default('/etc/ssl/certs/my.cert') }}"
telegraf_influxdb2_tls_key: "{{ ssl_keypath | default('/etc/private/ssl/my.key') }}"
telegraf_influxdb2_insecure_skip_verify: "true"

### EXAMPLE CONFIGS FORR LOKI / PROMETHEUS OUTPUTS

# # Telegraf Prometheus / Mimir remote write Output
# prometheus_server_ip: 0.0.0.0
# prometheus_default_url: http://{{ prometheus_server_ip }}:9009/api/v1/push
# prometheus_data_format: prometheusremotewrite
# prometheus_http_headers:
#   - header: Content-Type
#     value: application/x-protobuf
#   - header: Content-Encoding
#     value: snappy
#   - header: X-Prometheus-Remote-Write-Version
#     value: "0.1.0"
#
# # Prometheus remote-write output config
# - name: http
#   options:
#     url: "{{ prometheus_default_url }}"
#     data_format: "{{ prometheus_data_format }}"
#     headers:
#       Content-Type: application/x-protobuf
#       Content-Encoding: snappy
#       X-Prometheus-Remote-Write-Version: "0.1.0"
#
# # Telegraf Loki / Mimir remote write Output
# loki_server_ip: 0.0.0.0
# loki_default_url: http://{{ loki_server_ip }}:3100
# loki_endpoint: /loki/api/v1/push
# loki_timeout: 5s
# loki_metric_name_label: __name

# # Loki remote_write output config
# - name: loki
#   options:
#     domain: "{{ loki_default_url }}"
#     endpoint: "{{ loki_endpoint }}"
#     timeout: "{{ loki_timeout }}"

telegraf_output_plugins:
  # influxdb v2 output config
  - name: influxdb_v2
    options:
      urls:
        - "{{ telegraf_influxdb2_default_url }}"
      token: "{{ telegraf_influxdb2_token }}"
      organization: "{{ telegraf_influxdb2_organization }}"
      bucket: "{{ telegraf_influxdb2_bucket }}"
      exclude_bucket_tag: "{{ telegraf_influxdb2_exclude_bucket_tag }}"
      timeout: "{{ telegraf_influxdb2_timeout }}"
      user_agent: "{{ telegraf_influxdb2_user_agent }}"
      content_encoding: "{{ telegraf_influxdb2_content_encoding }}"
      influx_uint_support: "{{ telegraf_influxdb2_influx_uint_support }}"
      # tls_ca: "/etc/telegraf/ca.pem"
      #tls_cert: "{{ ssl_cert_slurp_path }}"
      #tls_key: "{{ ssl_key_slurp_path }}"
      insecure_skip_verify: "{{ telegraf_influxdb2_insecure_skip_verify }}"

# Base telegraf configuration override
telegraf_plugins_base:
  - name: system
  - name: cpu
    options:
      percpu: "true"
      totalcpu: "true"
  - name: mem
  - name: net
  - name: nstat
    options:
      proc_net_netstat: /proc/net/netstat
      proc_net_snmp: /proc/net/snmp
      dump_zeros: "true"
  - name: netstat
  - name: disk
    options:
      ignore_fs:
        - autofs
        - binfmt_misc
        - bpf
        - ceph
        - cgroup2
        - configfs
        - debugfs
        - devpts
        - devtmpfs
        - efivarfs
        - hugetlbfs
        - mqueue
        - proc
        - pstore
        - ramfs
        - rpc_pipefs
        - securityfs
        - sysfs
        - tmpfs
        - tracefs
        - overlay
        - iso9660
  - name: diskio
    options:
      skip_serial_number: "false"
      devices:
        - sd*
        - rbd*
        - dm*
        - nvme*
  - name: swap
  - name: processes
  - name: kernel
  - name: kernel_vmstat
  - name: internal
  - name: sysstat
    options:
      sadc_interval: 1s
      interval: 15s
      sadc_path: /usr/lib/sysstat/sadc
      activities:
        - DISK
        - XDISK
        - SNMP
        - INT
        - POWER
      group: "true"
      options:
        -C: cpu
        -B: paging
        -b: io
        -d: disk
        -H: hugepages
        -I ALL: interrupts
        -n ALL: network
        -P ALL: per_cpu
        -q: queue
        -r ALL: mem_util
        -S: swap_util
        -u: cpu_util
        -v: inode
        -W: swap
        -w: task
  - name: syslog
    options:
      server: tcp://:6514

telegraf_plugins: "{{ telegraf_plugins_base + telegraf_plugins_extra | default([]) }}"

snmp_pkgs:
  - snmp
  - libsnmp-base
  - snmp-mibs-downloader

metrics_pkgs:
  - sysstat
  - dstat
  - ifstat
  - lm-sensors
  - smartmontools
  - htop
  - ipmitool
  - ethtool
  - net-tools

# Example Grok Patterns for use with logparser input
# Works with default nginx 'main' log and 'fail2ban.log' configured by ansible-nginx role.
# nginx_accesslog_grokpattern: '%{CLIENT:client_ip} - %{NOTSPACE:ident} \[%{HTTPDATE:ts:ts-httpd}\] %{NOTSPACE:request_host:tag} "(?:%{WORD:verb:tag} %{NOTSPACE:request} (?:HTTP/%{NUMBER:http_version:float})?|%{DATA})" %{NUMBER:resp_code:tag} (?:%{NUMBER:resp_bytes:int}|-) "%{NOTSPACE:referrer}" "%{DATA:agent:tag}" (?:%{NUMBER:request_time}|-) (?:%{NUMBER:upstream_connect_time}|-) %{NOTSPACE:x_forwarded_for} %{NOTSPACE:upstream_cache_status:tag}'
# fail2ban_banlog_grokpattern: '%{TIMESTAMP_ISO8601:timestamp} %{WORD:log_src}.%{WORD:src_action} *\[%{INT:fail2ban_digit}\]: %{WORD:loglevel:tag} *\[%{NOTSPACE:service:tag}\] %{GREEDYDATA:ban_status:tag} %{IP:clientip:tag}'
